int pow(int x, int y) {
	int s = 1, i;
	for(i = 1; i <= y; i++) {
		s = s * x;
	}	
	return s;
}

int isprime(int n) {
	int i;
	if(n < 2) return 0;
	if(n == 2) return 1;
	for(i = 2; i <= sqrt(n); i++) {
		if(n % i == 0) return 0;
	}
	return 1;
}

int nextprime(int n) {
	int i;
	for(i = n + 1; ; i++) {
		if(isprime(i)) {
			break;
		}
	}
	return i;
}

void swap(int &a, int &b) {
	int t = a;
	a = b;
	b = t;	
}


int imax(int a[], int n) {
	int imax = 0, i;
	for(i = 1; i < n; i ++) {
		if(a[i] > a[imax]) {
			imax = i;
		}
	}
	return imax;
}

int indexof(int a[], int n, int v) {
	int i;
	for(i = 0; i < n; i++) {
		if(a[i] == v) {
			return i;
		}
	}
	return -1;
}

void insert(int a[], int& n, int k, int v) {
	if(k < 0 || k > n) return;
	int i;
	for(i = n; i > k; i --) {
		a[i] = a[i - 1];
	}
	a[k] = v;
	n++;
}


void remove(int a[], int &n, int k) {
	if(k < 0 || k > n - 1) return;
	int i;
	for(i = k; i < n - 1; i ++) {
		a[i] = a[i + 1];
	}	
	n --;
}


void selection(int a[], int n) {
	int i, j, imin;
	for(i = 0; i < n - 1; i ++) {
		//find min in a range of [i+1,n]
		imin = i + 1;
		for(j = i + 1; j < n; j ++) {
			if(a[j] < a[imin]) {
				imin = j;
			}
		}
		if(a[i] > a[imin]) {
			swap(a[i],a[imin]);
		}
	}
}


void bubble(int a[], int n) {
	int i, j;
	//n = 4;//first 4 numbers
	//for(i = n - 4; i < n - 1; i ++) {//4 last numbers
	for(i = 0; i < n - 1; i ++) {
		for(j = i + 1; j < n; j ++) {
			if(a[i] > a[j]) swap(a[i],a[j]);
		}
	}
}



//return the last pos of character c in s
int lastindexof(char s[], char c) {
	int i, n;
	n = strlen(s);
	for(i = n - 1; i >= 0; i --) {
		if(s[i] == c) return i;
	}
	return -1;
}
//return the first pos of character c in s
int indexof(char s[], char c) {
	int i, n;
	n = strlen(s);
	for(i = 0; i < n; i ++) {
		if(s[i] == c) return i;
	}
	return -1;
}

//exchange values of 2 strings
void swap(char a[], char b[]) {
	char t[31];
	strcpy(t,a);strcpy(a,b);strcpy(b,t);
}

//sort the list of strings ascending by their length
void bubble(char a[][31], int n) {
	int i, j;	
	for(i = 0; i < n - 1; i ++) {
		for(j = i + 1; j < n; j ++) {
			if(strlen(a[i]) > strlen(a[j])) swap(a[i],a[j]);
		}
	}
}

//get a substring in s from pos k with the length is len
void substring(char s[], int k, int len, char sub[]) {
	int i, j;
	j = 0;
	for(i = k; i < len + k; i ++) {
		sub[j] = s[i]; j++;
	}
	sub[j] = '\0';
}

//return the first pos of s2 in s
int indexof(char s[], char s2[]) {
	int i;
	char sub[31];
	int len1 = strlen(s), len2 = strlen(s2);
	for(i = 0; i <= len1 - len2; i++) {
		substring(s,i,len2,sub);		
		if(strcmp(s2,sub) == 0) return i;
	}
	return -1;
}

void reverse(char s[]){ //in chuoi dao nguoc
	char s1[200];
	int size=0;
	for(int i= strlen(s)-1;i>=0;i--){
		s1[size++]=s[i];
	}
	s1[size]='\0';
	
	for(int i=0;i<size;i++){
		s[i]=s1[i];
	}
}
//return 1 if s is a palindrome otherwise return 0
int ispalindrome(char s[]) {
	int i, n;
	n = strlen(s);
	for(i = 0; i < n / 2; i ++) {
		if(s[i] != s[n - i - 1]) return 0;
	}
	return 1;
}
int imax(char a[][31], int n) {
	int imax = 0, i;
	for(i = 1; i < n; i ++) {
		if(strlen(a[i]) > strlen(a[imax])) {
			imax = i;
		}
	}
	return imax;
}




#include <stdio.h>
#include <string.h>

int indexof(int a[], int n, int v) {
	int i;
	for(i = 0; i < n; i++) {
		if(a[i] == v) {
			return i;
		}
	}
	return -1;
}


//this below program is used to output the numbers in an array which occurrence one or more //than a time

int indexof(int a[], int n, int v) {
	int i;
	for(i = 0; i < n; i++) {
		if(a[i] == v) {
			return i;
		}
	}
	return -1;
}

main() {
	
	int a[50], b[50], n, i, j, k;
	scanf("%d",&n);
	for(i = 0; i < n; i ++) scanf("%d",&a[i]);
	k = 0;
	for(i = 0; i < n; i ++) {
		for(j = 0; j < n; j ++) {
			if(i != j && a[i] == a[j] && indexof(b,k,a[i]) == - 1){
				b[k] = a[i]; k ++;
			}
		}
	}
	printf("OUTPUT:\n");
	//numbers occurrence only one time
	for(i = 0; i < n; i ++) {
		if(indexof(b,k,a[i]) == -1) {
			printf("%-5d",a[i]);
		}
	}
	//numbers occurrence > 1
	for(i = 0; i < k; i ++) {
		//printf("%-5d",b[i]);
	}
}




